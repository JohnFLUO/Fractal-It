-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dimage_do_image is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    counter_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    counter_empty_n : IN STD_LOGIC;
    counter_read : OUT STD_LOGIC;
    couleur : OUT STD_LOGIC_VECTOR (11 downto 0);
    couleur_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dimage_do_image is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal color_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal color_ce0 : STD_LOGIC;
    signal color_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal counter_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component dimage_do_image_cbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    color_U : component dimage_do_image_cbkb
    generic map (
        DataWidth => 12,
        AddressRange => 51,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => color_address0,
        ce0 => color_ce0,
        q0 => color_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (counter_empty_n, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((counter_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    color_address0 <= tmp_fu_85_p1(6 - 1 downto 0);

    color_ce0_assign_proc : process(counter_empty_n, ap_CS_fsm_state1)
    begin
        if (((counter_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color_ce0 <= ap_const_logic_1;
        else 
            color_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    couleur <= color_q0;

    couleur_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            couleur_ap_vld <= ap_const_logic_1;
        else 
            couleur_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    counter_blk_n_assign_proc : process(counter_empty_n, ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            counter_blk_n <= counter_empty_n;
        else 
            counter_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    counter_read_assign_proc : process(counter_empty_n, ap_CS_fsm_state1)
    begin
        if (((counter_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            counter_read <= ap_const_logic_1;
        else 
            counter_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(counter_dout),64));
end behav;
