-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convergence is
port (
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    zoom : IN STD_LOGIC_VECTOR (7 downto 0);
    offset_X : IN STD_LOGIC_VECTOR (31 downto 0);
    offset_Y : IN STD_LOGIC_VECTOR (31 downto 0);
    s_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_out_full_n : IN STD_LOGIC;
    s_out_write : OUT STD_LOGIC;
    out_x : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_y : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of convergence is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convergence,hls_ip_2018_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.908000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=554,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal convergence_ssdm_s_load_fu_96_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal grp_convergence_do_convergence_fu_76_s_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convergence_do_convergence_fu_76_s_out_write : STD_LOGIC;
    signal grp_convergence_do_convergence_fu_76_out_x : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convergence_do_convergence_fu_76_out_x_ap_vld : STD_LOGIC;
    signal grp_convergence_do_convergence_fu_76_out_y : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convergence_do_convergence_fu_76_out_y_ap_vld : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";

    component convergence_do_convergence IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        zoom : IN STD_LOGIC_VECTOR (7 downto 0);
        offset_X : IN STD_LOGIC_VECTOR (31 downto 0);
        offset_Y : IN STD_LOGIC_VECTOR (31 downto 0);
        s_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_out_full_n : IN STD_LOGIC;
        s_out_write : OUT STD_LOGIC;
        out_x : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_x_ap_vld : OUT STD_LOGIC;
        out_y : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_y_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_convergence_do_convergence_fu_76 : component convergence_do_convergence
    port map (
        ap_clk => clk,
        ap_rst => reset,
        zoom => zoom,
        offset_X => offset_X,
        offset_Y => offset_Y,
        s_out_din => grp_convergence_do_convergence_fu_76_s_out_din,
        s_out_full_n => s_out_full_n,
        s_out_write => grp_convergence_do_convergence_fu_76_s_out_write,
        out_x => grp_convergence_do_convergence_fu_76_out_x,
        out_x_ap_vld => grp_convergence_do_convergence_fu_76_out_x_ap_vld,
        out_y => grp_convergence_do_convergence_fu_76_out_y,
        out_y_ap_vld => grp_convergence_do_convergence_fu_76_out_y_ap_vld);





    out_x_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((grp_convergence_do_convergence_fu_76_out_x_ap_vld = ap_const_logic_1)) then 
                out_x <= grp_convergence_do_convergence_fu_76_out_x;
            end if; 
        end if;
    end process;


    out_y_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((grp_convergence_do_convergence_fu_76_out_y_ap_vld = ap_const_logic_1)) then 
                out_y <= grp_convergence_do_convergence_fu_76_out_y;
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv2_0;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    convergence_ssdm_s_load_fu_96_p1 <= ap_const_lv1_0;
    s_out_din <= grp_convergence_do_convergence_fu_76_s_out_din;
    s_out_write <= grp_convergence_do_convergence_fu_76_s_out_write;
end behav;
