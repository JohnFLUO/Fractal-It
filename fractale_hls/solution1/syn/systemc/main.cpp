// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic main::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> main::ap_const_lv32_1 = "1";
const sc_lv<2> main::ap_const_lv2_0 = "00";
const sc_logic main::ap_const_logic_0 = sc_dt::Log_0;

main::main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_convergence_fu_102 = new convergence("grp_convergence_fu_102");
    grp_convergence_fu_102->zoom(zoom);
    grp_convergence_fu_102->offset_X(offset_X);
    grp_convergence_fu_102->offset_Y(offset_Y);
    grp_convergence_fu_102->s_out_din(grp_convergence_fu_102_s_out_din);
    grp_convergence_fu_102->s_out_full_n(sc_fifo_chn_1_full_n);
    grp_convergence_fu_102->s_out_write(grp_convergence_fu_102_s_out_write);
    grp_convergence_fu_102->out_x(grp_convergence_fu_102_out_x);
    grp_convergence_fu_102->out_y(grp_convergence_fu_102_out_y);
    grp_convergence_fu_102->clk(clk);
    grp_convergence_fu_102->reset(reset);
    grp_dimage_fu_124 = new dimage("grp_dimage_fu_124");
    grp_dimage_fu_124->counter_dout(sc_fifo_chn_1_dout);
    grp_dimage_fu_124->counter_empty_n(sc_fifo_chn_1_empty_n);
    grp_dimage_fu_124->counter_read(grp_dimage_fu_124_counter_read);
    grp_dimage_fu_124->couleur(grp_dimage_fu_124_couleur);
    grp_dimage_fu_124->clk(clk);
    grp_dimage_fu_124->reset(reset);
    sc_fifo_chn_1_fifo_U = new fifo_w8_d1_A("sc_fifo_chn_1_fifo_U");
    sc_fifo_chn_1_fifo_U->clk(clk);
    sc_fifo_chn_1_fifo_U->reset(reset);
    sc_fifo_chn_1_fifo_U->if_read_ce(ap_var_for_const0);
    sc_fifo_chn_1_fifo_U->if_write_ce(ap_var_for_const0);
    sc_fifo_chn_1_fifo_U->if_din(grp_convergence_fu_102_s_out_din);
    sc_fifo_chn_1_fifo_U->if_full_n(sc_fifo_chn_1_full_n);
    sc_fifo_chn_1_fifo_U->if_write(grp_convergence_fu_102_s_out_write);
    sc_fifo_chn_1_fifo_U->if_dout(sc_fifo_chn_1_dout);
    sc_fifo_chn_1_fifo_U->if_empty_n(sc_fifo_chn_1_empty_n);
    sc_fifo_chn_1_fifo_U->if_read(grp_dimage_fu_124_counter_read);

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_couleur);
    sensitive << ( grp_dimage_fu_124_couleur );

    SC_METHOD(thread_x);
    sensitive << ( grp_convergence_fu_102_out_x );

    SC_METHOD(thread_y);
    sensitive << ( grp_convergence_fu_102_out_y );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, couleur, "(port)couleur");
    sc_trace(mVcdFile, zoom, "(port)zoom");
    sc_trace(mVcdFile, offset_X, "(port)offset_X");
    sc_trace(mVcdFile, offset_Y, "(port)offset_Y");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_convergence_fu_102_s_out_din, "grp_convergence_fu_102_s_out_din");
    sc_trace(mVcdFile, grp_convergence_fu_102_s_out_write, "grp_convergence_fu_102_s_out_write");
    sc_trace(mVcdFile, grp_convergence_fu_102_out_x, "grp_convergence_fu_102_out_x");
    sc_trace(mVcdFile, grp_convergence_fu_102_out_y, "grp_convergence_fu_102_out_y");
    sc_trace(mVcdFile, grp_dimage_fu_124_counter_read, "grp_dimage_fu_124_counter_read");
    sc_trace(mVcdFile, grp_dimage_fu_124_couleur, "grp_dimage_fu_124_couleur");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sc_fifo_chn_1_dout, "sc_fifo_chn_1_dout");
    sc_trace(mVcdFile, sc_fifo_chn_1_empty_n, "sc_fifo_chn_1_empty_n");
    sc_trace(mVcdFile, sc_fifo_chn_1_full_n, "sc_fifo_chn_1_full_n");
#endif

    }
    mHdltvinHandle.open("main.hdltvin.dat");
    mHdltvoutHandle.open("main.hdltvout.dat");
}

main::~main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_convergence_fu_102;
    delete grp_dimage_fu_124;
    delete sc_fifo_chn_1_fifo_U;
}

void main::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void main::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void main::thread_couleur() {
    couleur = grp_dimage_fu_124_couleur.read();
}

void main::thread_x() {
    x = grp_convergence_fu_102_out_x.read();
}

void main::thread_y() {
    y = grp_convergence_fu_102_out_y.read();
}

void main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"couleur\" :  \"" << couleur.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"zoom\" :  \"" << zoom.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"offset_X\" :  \"" << offset_X.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"offset_Y\" :  \"" << offset_Y.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

