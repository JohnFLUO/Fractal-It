// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convergence.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convergence::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> convergence::ap_const_lv1_0 = "0";
const sc_lv<32> convergence::ap_const_lv32_1 = "1";
const sc_lv<1> convergence::ap_const_lv1_1 = "1";
const sc_lv<2> convergence::ap_const_lv2_0 = "00";
const sc_logic convergence::ap_const_logic_0 = sc_dt::Log_0;
const bool convergence::ap_const_boolean_1 = true;

convergence::convergence(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_convergence_do_convergence_fu_76 = new convergence_do_convergence("grp_convergence_do_convergence_fu_76");
    grp_convergence_do_convergence_fu_76->ap_clk(clk);
    grp_convergence_do_convergence_fu_76->ap_rst(reset);
    grp_convergence_do_convergence_fu_76->zoom(zoom);
    grp_convergence_do_convergence_fu_76->offset_X(offset_X);
    grp_convergence_do_convergence_fu_76->offset_Y(offset_Y);
    grp_convergence_do_convergence_fu_76->s_out_din(grp_convergence_do_convergence_fu_76_s_out_din);
    grp_convergence_do_convergence_fu_76->s_out_full_n(s_out_full_n);
    grp_convergence_do_convergence_fu_76->s_out_write(grp_convergence_do_convergence_fu_76_s_out_write);
    grp_convergence_do_convergence_fu_76->out_x(grp_convergence_do_convergence_fu_76_out_x);
    grp_convergence_do_convergence_fu_76->out_x_ap_vld(grp_convergence_do_convergence_fu_76_out_x_ap_vld);
    grp_convergence_do_convergence_fu_76->out_y(grp_convergence_do_convergence_fu_76_out_y);
    grp_convergence_do_convergence_fu_76->out_y_ap_vld(grp_convergence_do_convergence_fu_76_out_y_ap_vld);

    SC_METHOD(thread_out_x);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_out_y);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_convergence_ssdm_s_load_fu_96_p1);

    SC_METHOD(thread_s_out_din);
    sensitive << ( grp_convergence_do_convergence_fu_76_s_out_din );
    sensitive << ( grp_convergence_do_convergence_fu_76_s_out_write );

    SC_METHOD(thread_s_out_write);
    sensitive << ( grp_convergence_do_convergence_fu_76_s_out_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convergence_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, zoom, "(port)zoom");
    sc_trace(mVcdFile, offset_X, "(port)offset_X");
    sc_trace(mVcdFile, offset_Y, "(port)offset_Y");
    sc_trace(mVcdFile, s_out_din, "(port)s_out_din");
    sc_trace(mVcdFile, s_out_full_n, "(port)s_out_full_n");
    sc_trace(mVcdFile, s_out_write, "(port)s_out_write");
    sc_trace(mVcdFile, out_x, "(port)out_x");
    sc_trace(mVcdFile, out_y, "(port)out_y");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, convergence_ssdm_s_load_fu_96_p1, "convergence_ssdm_s_load_fu_96_p1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_s_out_din, "grp_convergence_do_convergence_fu_76_s_out_din");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_s_out_write, "grp_convergence_do_convergence_fu_76_s_out_write");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_out_x, "grp_convergence_do_convergence_fu_76_out_x");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_out_x_ap_vld, "grp_convergence_do_convergence_fu_76_out_x_ap_vld");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_out_y, "grp_convergence_do_convergence_fu_76_out_y");
    sc_trace(mVcdFile, grp_convergence_do_convergence_fu_76_out_y_ap_vld, "grp_convergence_do_convergence_fu_76_out_y_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
}

convergence::~convergence() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_convergence_do_convergence_fu_76;
}

void convergence::thread_out_x() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convergence_do_convergence_fu_76_out_x_ap_vld.read())) {
        out_x = grp_convergence_do_convergence_fu_76_out_x.read();
    }
}

void convergence::thread_out_y() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convergence_do_convergence_fu_76_out_y_ap_vld.read())) {
        out_y = grp_convergence_do_convergence_fu_76_out_y.read();
    }
}

void convergence::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void convergence::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convergence::thread_convergence_ssdm_s_load_fu_96_p1() {
    convergence_ssdm_s_load_fu_96_p1 = ap_const_lv1_0;
}

void convergence::thread_s_out_din() {
    s_out_din = grp_convergence_do_convergence_fu_76_s_out_din.read();
}

void convergence::thread_s_out_write() {
    s_out_write = grp_convergence_do_convergence_fu_76_s_out_write.read();
}

}

